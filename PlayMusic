#!/bin/bash
cd "$HOME/Music" # So that any download will be in the music directory
function IsYes { d=$(echo $1 | tr [[:upper:]] [[:lower:]]);if ([[ "${d:0:1}" == 'y' ]] && [[  "${#d}" -le 4 ]]) || [[ $d == 'ok' ]];then return 0; else return 1;fi; }
declare -r settings_file='/etc/PlayMusic.settings';line_number=1;declare SITES=();declare player;declare recursive;declare FILE;declare FILE2
function create_settings_file {
	tmp_file="$HOME/Desktop/File_$RANDOM"
	cat > $tmp_file <<- EOF
		Player = mplayer
		Sites = {'http://ccmixter.org/view/media/samples/mixed'}
	EOF
	sudo mv $tmp_file '/etc/PlayMusic.settings'
	rm $tmp_file &>/dev/null # just in case ..
}
function UNINSTALL {
	read -p 'Do you want to keep settings ? '
	if ! IsYes $REPLY;then sudo rm '/etc/PlayMusic.settings';fi
	sudo rm '/usr/bin/PlayMusic'
	sudo rm '/usr/share/man/man1/PlayMusic.1.gz'
	echo 'Uninstallation Success !';exit 0
}
OlD="$IFS";if [[ -f $settings_file ]];then # going to parse the settings file
	IFS=$'\n';for line in $(cat $settings_file | sed -E 's/.*=( +)?//g' 2>/dev/null);do
		case $line_number in
			1 ) player=$line;;
			2 ) for written_site in $(echo $line | sed -E "s#\{|'|\}|,##g");do SITES[${#SITES[@]}]="$written_site";done;;
			* ) break;;
		esac;((line_number++))
	done;IFS="$OlD"
else
	notify-send "Settings File not Found .. !";read -p "You haven't created your settings file .. Do you want to create it ? ";
	if IsYes $REPLY; then create_settings_file;sudo nano $settings_file;notify-send 'Done !'
	else echo 'Then, The Default settings are going to be used this time ..';fi
fi
player=${player=mplayer};recursive=false # Adding defaults and initializing variables
if [[ ${#SITES[@]} == 0 ]];then SITES=('http://ccmixter.org/view/media/samples/mixed');fi # If no Site was specified in the settings file
while getopts rsvu opt;do # Getting options
	case $opt in
		r) recursive=true;; # The variable for checking wether to play music recursively or not ..
		s ) sudo rm '/etc/PlayMusic.settings' &>/dev/null;create_settings_file;notify-send "Settings File Recreated Successfully !";exit 0;;
		v ) read -p 'Editor ? ';sudo $REPLY '/etc/PlayMusic.settings';exit 0;;
		u ) read -p 'Are you sure you want to UnInstall ? ';if IsYes $REPLY;then UNINSTALL;fi;;
	esac
done
function Play { # Function for playing music according to user preferences
	if $2 && [[ ${#1} -lt 23 ]];then notify-send "Now Playing $1 .." "$track";fi # Notifing the user,only if he'll play freely ( $2 ) & the track's name isn't too long
	if $recursive && $2;then while true;do $player "$1";done;else $player "$1";fi # Playing, according to user preferences
}
function Find { 
	echo "Looking for '$1' on disk .. "; # Informing the user, if that's going to take long ( which depends on the contents of his home directory )
	FILES=$(find ~ -name "$1.mp3" 2>/dev/null);clear # The main file ( the found file, or null if not found ) ..
	if [[ $(echo "$FILES" | wc -l) -gt 1 ]];then IFS=$'\n';echo 'File was found at various places .. Which one to select ?'
		select file in $FILES; do
			[[ -n $file ]] || continue
			FILE="$file";break
		done
		read -p 'Do you want to Delete the other ones ? ' rrf
		if IsYes $rrf;then for file in $FILES;do if ! [[ "$file" == "$FILE" ]];then rm "$file";fi;done;IFS="$OlD";fi
	else FILE="$FILES";fi
	clear # Just clear, so that the user doesn't see the first message if the finding operation went quickly ..
}
declare -A Tracks;clear;echo 'Loading Sites ..'
for SITE in $SITES;do # Looping through all sites specified
	for site in $(lynx -source "$SITE" | egrep -o 'http://.*\.mp3');do # Grabbing all music links ( newline delimeted )
		name="$(echo $site | sed -E -e 's/_/ /g' -e 's#.*/##g' -e 's#.mp3##g' -e 's#.*%2D ##g' -e 's#%2B# #g' -e "s#%2527#\'#g" -e 's#%2528#(#g' -e 's#%2529#)#g')" # Filtering names out of sites ..
		Tracks[$name]="$site" # Adding the name as the key, and the site as the value
	done
done;clear # Clear anything there is on the screen ( It should be already cleared, so this re-positions the view if the user changed it ( which is very likely ) ) ..
if [[ ${#Tracks[@]} == 0 ]];then echo 'No Music was Found !';fi # Just in Case ;)
select track in "${!Tracks[@]}";do
	[[ -n $track ]] || continue # Continues the loop if choice is empty ( meaning that user's choice wasn't appropriate ) ..
	clear;echo 'What do you want to do ?';name="$track.mp3" # Setting the name and asking the user ..
	select choice in "Download then Play" "Just Play Online";do [[ -n $choice ]] || continue # ( already demonstrated )
		if [[ $choice == "Download then Play" ]];then # Instead of the case statement ( since this offers only two options )
			Find "$track" # Looking for the specified track on disk
			if [[ -n $FILE ]] ;then # if the track was found on disk
				[[ $(dirname "$FILE") == "$HOME/Music" ]] || { # if the found file is not in the music directory
					notify-send "$track was found at ($(dirname $FILE)) and was moved to ($HOME/Music)" # inform the user of the changes
					mv "$FILE" "$HOME/Music" &>/dev/null;FILE="$HOME/Music/$name" # move the file to the music home directory
				};name="$FILE"
			fi;notify-send "Downloading ($track) .." "in [ $PWD ] ..";wget -cO "$name" "${Tracks[$track]}" && Play "$name" true # Download & Play
		else Play "${Tracks[$track]}" true # Play Online
		fi;break
	done;break
done;exit 0
